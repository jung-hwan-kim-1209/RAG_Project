"""
Layer 8: REPORT GENERATION LAYER
unicorn_report_generatorÎ•º Ïã§ÌñâÌïòÏó¨ ÏµúÏ¢Ö Ìà¨Ïûê ÌèâÍ∞Ä Î¶¨Ìè¨Ìä∏Î•º ÏÉùÏÑ±ÌïòÎäî Î†àÏù¥Ïñ¥
"""
from typing import List, Dict, Any, Optional
from datetime import datetime
from langchain_openai import ChatOpenAI
from langchain_core.prompts import PromptTemplate
from langchain_core.output_parsers import StrOutputParser # Ï∂úÎ†• ÌååÏÑú Ï∂îÍ∞Ä


from models import (
    InvestmentReport, InvestmentRecommendation, UnicornScore,
    AnalysisResult, RiskAssessment, CompanyInfo, PipelineContext, RiskLevel,
    DocumentChunk, ExternalSearchResult
)
from config import get_config


class UnicornReportGenerator:
    """Ïú†ÎãàÏΩò Ìà¨Ïûê ÌèâÍ∞Ä Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±Í∏∞"""


    def __init__(self):
        self.config = get_config()
        # ChatOpenAI Î™®Îç∏Í≥º StrOutputParserÎ•º ÌååÏù¥ÌîÑÎ°ú Ïó∞Í≤∞ÌïòÏó¨, Í≤∞Í≥ºÍ∞Ä Ìï≠ÏÉÅ Î¨∏ÏûêÏó¥(str)Î°ú ÎÇòÏò§ÎèÑÎ°ù Ï≤¥Ïù∏ÏùÑ Íµ¨ÏÑ±Ìï©ÎãàÎã§.
        self.llm_chain = (
            ChatOpenAI(
                openai_api_key=self.config["model"].openai_api_key,
                temperature=self.config["model"].temperature,
                model_name=self.config["model"].model_name
            )
            | StrOutputParser()
        )


        # Executive Summary ÏÉùÏÑ± ÌîÑÎ°¨ÌîÑÌä∏
        self.executive_summary_prompt = PromptTemplate(
            input_variables=["company_name", "total_score", "grade", "unicorn_probability", "recommendation"],
            template="""Îã§Ïùå Ï†ïÎ≥¥Î•º Î∞îÌÉïÏúºÎ°ú {company_name}Ïóê ÎåÄÌïú Ìà¨Ïûê ÌèâÍ∞Ä Executive SummaryÎ•º ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.


ÌöåÏÇ¨Î™Ö: {company_name}
Ï¢ÖÌï© Ï†êÏàò: {total_score}/100
Îì±Í∏â: {grade}
Ïú†ÎãàÏΩò ÌôïÎ•†: {unicorn_probability:.1%}
Ìà¨Ïûê Ï∂îÏ≤ú: {recommendation}


Executive SummaryÎäî Îã§Ïùå Íµ¨Ï°∞Î°ú ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî:
1. ÌïµÏã¨ Í≤∞Î°† (2-3Ï§Ñ)
2. Ï£ºÏöî Í∞ïÏ†ê (3-4Í∞ú Ìï≠Î™©)
3. Ï£ºÏöî Ïö∞Î†§ÏÇ¨Ìï≠ (2-3Í∞ú Ìï≠Î™©)
4. Ìà¨Ïûê Í∂åÏû•ÏÇ¨Ìï≠ (1-2Ï§Ñ)


Ï†ÑÎ¨∏Ï†ÅÏù¥Í≥† Í∞ÑÍ≤∞Ìïú Ìà¨Ïûê Î≥¥Í≥†ÏÑú ÌòïÏãùÏúºÎ°ú ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî."""
        )


        # ÏÉÅÏÑ∏ Î∂ÑÏÑù ÏöîÏïΩ ÌîÑÎ°¨ÌîÑÌä∏
        self.detailed_analysis_prompt = PromptTemplate(
            input_variables=["company_name", "analysis_results", "risk_assessments"],
            template="""Îã§Ïùå Î∂ÑÏÑù Í≤∞Í≥ºÎì§ÏùÑ Î∞îÌÉïÏúºÎ°ú {company_name}Ïóê ÎåÄÌïú ÏÉÅÏÑ∏ Î∂ÑÏÑù Î≥¥Í≥†ÏÑúÎ•º ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.


Î∂ÑÏÑù Í≤∞Í≥º:
{analysis_results}


Î¶¨Ïä§ÌÅ¨ ÌèâÍ∞Ä:
{risk_assessments}


Îã§Ïùå ÏÑπÏÖòÎ≥ÑÎ°ú Íµ¨ÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî:
1. ÏÑ±Ïû•ÏÑ± Î∂ÑÏÑù
2. ÎπÑÏ¶àÎãàÏä§ Î™®Îç∏ ÌèâÍ∞Ä
3. Í∏∞Ïà†Î†• Î∞è Î≥¥ÏïàÏÑ±
4. Ïû¨Î¨¥ Í±¥Ï†ÑÏÑ±
5. ÌåÄ Ïó≠Îüâ ÌèâÍ∞Ä
6. Í∑úÏ†ú ÌôòÍ≤Ω Î∂ÑÏÑù
7. ÌååÌä∏ÎÑàÏã≠ Î∞è ÎÑ§Ìä∏ÏõåÌÅ¨


Í∞Å ÏÑπÏÖòÏùÄ Ï†êÏàò, Ï£ºÏöî Î∞úÍ≤¨ÏÇ¨Ìï≠, Í∞úÏÑ† Í∂åÏû•ÏÇ¨Ìï≠ÏùÑ Ìè¨Ìï®Ìï¥Ï£ºÏÑ∏Ïöî."""
        )


        # Ìà¨Ïûê Í∑ºÍ±∞ ÌîÑÎ°¨ÌîÑÌä∏
        self.investment_rationale_prompt = PromptTemplate(
            input_variables=["company_name", "recommendation", "unicorn_score", "key_factors"],
            template="""Îã§Ïùå Ï†ïÎ≥¥Î•º Î∞îÌÉïÏúºÎ°ú {company_name}Ïóê ÎåÄÌïú Ìà¨Ïûê Í∑ºÍ±∞Î•º ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.


Ìà¨Ïûê Ï∂îÏ≤ú: {recommendation}
Ïú†ÎãàÏΩò Ï†êÏàò: {unicorn_score}
Ï£ºÏöî ÏöîÏù∏Îì§: {key_factors}


Ìà¨Ïûê Í∑ºÍ±∞Îäî Îã§ÏùåÏùÑ Ìè¨Ìï®Ìï¥Ï£ºÏÑ∏Ïöî:
1. Ìà¨Ïûê Í≤∞Ï†ïÏùò ÌïµÏã¨ ÎÖºÎ¶¨
2. ÏòàÏÉÅ ÏàòÏùµÎ•† Î∞è Î¶¨Ïä§ÌÅ¨ Í∑†Ìòï
3. Ìà¨Ïûê ÌÉÄÏù¥Î∞çÏùò Ï†ÅÏ†àÏÑ±
4. Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÎÇ¥ Ìè¨ÏßÄÏÖîÎãù
5. Exit Ï†ÑÎûµ Í≥†Î†§ÏÇ¨Ìï≠


Ìà¨ÏûêÏûê Í¥ÄÏ†êÏóêÏÑú Î™ÖÌôïÌïòÍ≥† ÏÑ§ÎìùÎ†• ÏûàÍ≤å ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî."""
        )


    def determine_investment_recommendation(
        self,
        unicorn_score: UnicornScore,
        risk_assessments: List[RiskAssessment]
    ) -> InvestmentRecommendation:
        """Ìà¨Ïûê Ï∂îÏ≤ú Í≤∞Ï†ï"""


        total_score = unicorn_score.total_score
        unicorn_probability = unicorn_score.unicorn_probability


        # ÎÜíÏùÄ Î¶¨Ïä§ÌÅ¨ Ï≤¥ÌÅ¨
        high_risk_count = sum(1 for risk in risk_assessments
                              if risk.risk_level.value in ["ÎÜíÏùå", "Îß§Ïö∞ ÎÜíÏùå"])


        # Ìà¨Ïûê Í≤∞Ï†ï Î°úÏßÅ
        if total_score >= 85 and unicorn_probability >= 0.7 and high_risk_count <= 1:
            return InvestmentRecommendation.INVEST
        elif total_score >= 70 and unicorn_probability >= 0.5 and high_risk_count <= 2:
            return InvestmentRecommendation.INVEST
        elif total_score >= 60 and high_risk_count <= 3:
            return InvestmentRecommendation.HOLD
        else:
            return InvestmentRecommendation.AVOID


    def generate_executive_summary(
        self,
        company_info: CompanyInfo,
        unicorn_score: UnicornScore,
        recommendation: InvestmentRecommendation
    ) -> str:
        """Executive Summary ÏÉùÏÑ±"""
        try:
            # --- Ïó¨Í∏∞Í∞Ä ÏàòÏ†ïÎêú Î∂ÄÎ∂ÑÏûÖÎãàÎã§ ---
            # 1. llm_chain ÏÇ¨Ïö©, 2. .invoke()Î°ú Ìò∏Ï∂ú, 3. .content ÏóÜÏù¥ Î∞îÎ°ú ÏÇ¨Ïö©
            prompt = self.executive_summary_prompt.format(
                company_name=company_info.name,
                total_score=unicorn_score.total_score,
                grade=unicorn_score.grade,
                unicorn_probability=unicorn_score.unicorn_probability,
                recommendation=recommendation.value
            )
            response = self.llm_chain.invoke(prompt)
            return response.strip()
        except Exception as e:
            return f"Executive Summary ÏÉùÏÑ± Ïò§Î•ò: {str(e)}"


    def generate_detailed_analysis(
        self,
        company_info: CompanyInfo,
        analysis_results: List[AnalysisResult],
        risk_assessments: List[RiskAssessment]
    ) -> str:
        """ÏÉÅÏÑ∏ Î∂ÑÏÑù Î≥¥Í≥†ÏÑú ÏÉùÏÑ±"""
        try:
            analysis_text = []
            for result in analysis_results:
                analysis_text.append(
                    f"[{result.category}] {result.score}Ï†ê ({result.grade}Í∏â)\n"
                    f"ÏöîÏïΩ: {result.summary}\n"
                    f"Í∞ïÏ†ê: {', '.join(result.key_strengths)}\n"
                    f"ÏïΩÏ†ê: {', '.join(result.key_weaknesses)}\n"
                )

            risk_text = []
            for risk in risk_assessments:
                risk_text.append(
                    f"[{risk.category}] {risk.risk_level.value}\n"
                    f"ÏÑ§Î™Ö: {risk.description}\n"
                    f"ÏôÑÌôî Ï†ÑÎûµ: {', '.join(risk.mitigation_strategies)}\n"
                )

            # --- Ïó¨Í∏∞Í∞Ä ÏàòÏ†ïÎêú Î∂ÄÎ∂ÑÏûÖÎãàÎã§ ---
            prompt = self.detailed_analysis_prompt.format(
                company_name=company_info.name,
                analysis_results="\n".join(analysis_text),
                risk_assessments="\n".join(risk_text)
            )
            response = self.llm_chain.invoke(prompt)
            return response.strip()
        except Exception as e:
            return f"ÏÉÅÏÑ∏ Î∂ÑÏÑù ÏÉùÏÑ± Ïò§Î•ò: {str(e)}"


    def generate_investment_rationale(
        self,
        company_info: CompanyInfo,
        recommendation: InvestmentRecommendation,
        unicorn_score: UnicornScore
    ) -> str:
        """Ìà¨Ïûê Í∑ºÍ±∞ ÏÉùÏÑ±"""
        try:
            key_factors = unicorn_score.score_breakdown.get("unicorn_factors", [])
            key_factors_text = ", ".join(key_factors) if key_factors else "Ï¢ÖÌï© Î∂ÑÏÑù Í≤∞Í≥º"

            # --- Ïó¨Í∏∞Í∞Ä ÏàòÏ†ïÎêú Î∂ÄÎ∂ÑÏûÖÎãàÎã§ ---
            prompt = self.investment_rationale_prompt.format(
                company_name=company_info.name,
                recommendation=recommendation.value,
                unicorn_score=f"{unicorn_score.total_score:.1f}Ï†ê ({unicorn_score.grade}Í∏â)",
                key_factors=key_factors_text
            )
            response = self.llm_chain.invoke(prompt)
            return response.strip()
        except Exception as e:
            return f"Ìà¨Ïûê Í∑ºÍ±∞ ÏÉùÏÑ± Ïò§Î•ò: {str(e)}"

    # ... Ïù¥Ìïò ÏΩîÎìúÎäî ÎèôÏùº ...
    # (generate_risk_summary Î∂ÄÌÑ∞ ÎÅùÍπåÏßÄÏùò ÏΩîÎìúÎäî Í∑∏ÎåÄÎ°ú ÎëêÏãúÎ©¥ Îê©ÎãàÎã§.)
    def generate_risk_summary(self, risk_assessments: List[RiskAssessment]) -> str:
        """Î¶¨Ïä§ÌÅ¨ ÏöîÏïΩ ÏÉùÏÑ±"""
        if not risk_assessments:
            return "Î¶¨Ïä§ÌÅ¨ ÌèâÍ∞Ä Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§."

        risk_summary = []
        risk_summary.append("## Î¶¨Ïä§ÌÅ¨ ÏöîÏïΩ")

        critical_risks = [r for r in risk_assessments if r.risk_level == RiskLevel.CRITICAL]
        high_risks = [r for r in risk_assessments if r.risk_level == RiskLevel.HIGH]
        medium_risks = [r for r in risk_assessments if r.risk_level == RiskLevel.MEDIUM]
        low_risks = [r for r in risk_assessments if r.risk_level == RiskLevel.LOW]

        if critical_risks:
            risk_summary.append("### üî¥ Îß§Ïö∞ ÎÜíÏùÄ Î¶¨Ïä§ÌÅ¨")
            for risk in critical_risks:
                risk_summary.append(f"- **{risk.category}**: {risk.description}")

        if high_risks:
            risk_summary.append("### üü† ÎÜíÏùÄ Î¶¨Ïä§ÌÅ¨")
            for risk in high_risks:
                risk_summary.append(f"- **{risk.category}**: {risk.description}")

        if medium_risks:
            risk_summary.append("### üü° Î≥¥ÌÜµ Î¶¨Ïä§ÌÅ¨")
            for risk in medium_risks:
                risk_summary.append(f"- **{risk.category}**: {risk.description}")

        if low_risks:
            risk_summary.append("### üü¢ ÎÇÆÏùÄ Î¶¨Ïä§ÌÅ¨")
            for risk in low_risks:
                risk_summary.append(f"- **{risk.category}**: {risk.description}")

        return "\n".join(risk_summary)


    def calculate_confidence_level(
        self,
        analysis_results: List[AnalysisResult],
        risk_assessments: List[RiskAssessment],
        documents: List[DocumentChunk],
        external_results: List[ExternalSearchResult]
    ) -> float:
        """Ïã†Î¢∞ÎèÑ Î†àÎ≤® Í≥ÑÏÇ∞"""
        confidence_factors = []
        data_confidence = min(len(documents) + len(external_results), 20) / 20.0
        confidence_factors.append(data_confidence)
        analysis_confidence = len(analysis_results) / 7.0 
        confidence_factors.append(analysis_confidence)
        risk_confidence = len(risk_assessments) / 6.0 
        confidence_factors.append(risk_confidence)
        overall_confidence = sum(confidence_factors) / len(confidence_factors)
        return min(overall_confidence, 1.0)


    def generate_investment_report(
        self,
        company_info: CompanyInfo,
        unicorn_score: UnicornScore,
        analysis_results: List[AnalysisResult],
        risk_assessments: List[RiskAssessment],
        documents: List[DocumentChunk],
        external_results: List[ExternalSearchResult]
    ) -> InvestmentReport:
        """ÏµúÏ¢Ö Ìà¨Ïûê ÌèâÍ∞Ä Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±"""
        recommendation = self.determine_investment_recommendation(unicorn_score, risk_assessments)
        executive_summary = self.generate_executive_summary(company_info, unicorn_score, recommendation)
        detailed_analysis = self.generate_detailed_analysis(company_info, analysis_results, risk_assessments)
        investment_rationale = self.generate_investment_rationale(company_info, recommendation, unicorn_score)
        risk_summary = self.generate_risk_summary(risk_assessments)
        confidence_level = self.calculate_confidence_level(analysis_results, risk_assessments, documents, external_results)
        
        data_sources = list(set([doc.source for doc in documents] + [res.source for res in external_results]))

        limitations = []
        if len(documents) < 5: limitations.append("Ï†úÌïúÎêú ÎÇ¥Î∂Ä Î¨∏ÏÑú Îç∞Ïù¥ÌÑ∞")
        if len(external_results) < 3: limitations.append("Ï†úÌïúÎêú Ïô∏Î∂Ä Í≤ÄÏÉâ Í≤∞Í≥º")
        if confidence_level < 0.7: limitations.append("Ï§ëÍ∞Ñ ÏàòÏ§ÄÏùò Î∂ÑÏÑù Ïã†Î¢∞ÎèÑ")

        return InvestmentReport(
            company_info=company_info, evaluation_date=datetime.now(),
            unicorn_score=unicorn_score, recommendation=recommendation,
            analysis_results=analysis_results, risk_assessments=risk_assessments,
            executive_summary=executive_summary, detailed_analysis=detailed_analysis,
            investment_rationale=investment_rationale, risk_summary=risk_summary,
            confidence_level=confidence_level, data_sources=data_sources, limitations=limitations
        )

# ... Ïù¥Ìïò ÏΩîÎìúÎäî ÎèôÏùº ...

class ReportFormatter:
    """Î¶¨Ìè¨Ìä∏ Ìè¨Îß∑ÌÑ∞"""
    def __init__(self): pass

    def format_console_report(self, report: InvestmentReport) -> str:
        """ÏΩòÏÜîÏö© Î¶¨Ìè¨Ìä∏ Ìè¨Îß∑ÌåÖ"""
        lines = []
        lines.append("=" * 80)
        lines.append(f"ü¶Ñ AI Ïä§ÌÉÄÌä∏ÏóÖ Ìà¨Ïûê ÌèâÍ∞Ä Î¶¨Ìè¨Ìä∏: {report.company_info.name}")
        lines.append("=" * 80)
        lines.append("\nüìä EXECUTIVE SUMMARY")
        lines.append("-" * 40)
        lines.append(f"Ï¢ÖÌï© Ï†êÏàò: {report.unicorn_score.total_score:.1f}/100 ({report.unicorn_score.grade}Í∏â)")
        lines.append(f"Ïú†ÎãàÏΩò ÌôïÎ•†: {report.unicorn_score.unicorn_probability:.1%}")
        lines.append(f"Ìà¨Ïûê Ï∂îÏ≤ú: {report.recommendation.value}")
        lines.append(f"Ïã†Î¢∞ÎèÑ: {report.confidence_level:.1%}")
        lines.append(""); lines.append(report.executive_summary)
        lines.append("\nüìà ÏòÅÏó≠Î≥Ñ Ï†êÏàòÏπ¥Îìú"); lines.append("-" * 40)
        for result in report.analysis_results:
            lines.append(f"{result.category:20} {result.score:5.1f}Ï†ê ({result.grade}Í∏â)")
        lines.append("\n‚ö†Ô∏è Î¶¨Ïä§ÌÅ¨ ÌèâÍ∞Ä"); lines.append("-" * 40)
        for risk in report.risk_assessments:
            risk_emoji = {"ÎÇÆÏùå": "üü¢", "Î≥¥ÌÜµ": "üü°", "ÎÜíÏùå": "üü†", "Îß§Ïö∞ ÎÜíÏùå": "üî¥"}
            emoji = risk_emoji.get(risk.risk_level.value, "‚ö™")
            lines.append(f"{emoji} {risk.category}: {risk.risk_level.value}")
        lines.append(f"\nüí∞ Ìà¨Ïûê Í∂åÏû•ÏÇ¨Ìï≠"); lines.append("-" * 40)
        lines.append(report.investment_rationale)
        lines.append(f"\nüìã ÌèâÍ∞Ä Ï†ïÎ≥¥"); lines.append("-" * 40)
        lines.append(f"ÌèâÍ∞Ä ÏùºÏãú: {report.evaluation_date.strftime('%Y-%m-%d %H:%M:%S')}")
        lines.append(f"Îç∞Ïù¥ÌÑ∞ ÏÜåÏä§: {len(report.data_sources)}Í∞ú")
        if report.limitations: lines.append(f"Ï†úÌïúÏÇ¨Ìï≠: {', '.join(report.limitations)}")
        lines.append("=" * 80)
        return "\n".join(lines)
    
    def format_json_report(self, report: InvestmentReport) -> Dict[str, Any]:
        """JSON ÌòïÏãù Î¶¨Ìè¨Ìä∏ Ìè¨Îß∑ÌåÖ"""
        return {
            "company_info": report.company_info.dict(),
            "evaluation_summary": {
                "evaluation_date": report.evaluation_date.isoformat(),
                "total_score": report.unicorn_score.total_score,
                "grade": report.unicorn_score.grade,
                "unicorn_probability": report.unicorn_score.unicorn_probability,
                "recommendation": report.recommendation.value,
                "confidence_level": report.confidence_level
            },
            "analysis_results": [r.dict() for r in report.analysis_results],
            "risk_assessments": [r.dict() for r in report.risk_assessments],
            "reports": {
                "executive_summary": report.executive_summary,
                "detailed_analysis": report.detailed_analysis,
                "investment_rationale": report.investment_rationale,
                "risk_summary": report.risk_summary
            },
            "metadata": {
                "data_sources": report.data_sources,
                "limitations": report.limitations,
                "score_breakdown": report.unicorn_score.score_breakdown
            }
        }


class ReportGenerationLayer:
    """Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± Î†àÏù¥Ïñ¥ Î©îÏù∏ ÌÅ¥ÎûòÏä§"""
    def __init__(self):
        self.report_generator = UnicornReportGenerator()
        self.formatter = ReportFormatter()

    def generate_report(self, context: PipelineContext) -> InvestmentReport:
        """Ìà¨Ïûê ÌèâÍ∞Ä Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±"""
        return self.report_generator.generate_investment_report(
            company_info=context.company_info, unicorn_score=context.unicorn_score,
            analysis_results=context.analysis_results, risk_assessments=context.risk_assessments,
            documents=context.retrieved_documents, external_results=context.external_search_results
        )

    def format_report(self, report: InvestmentReport, format_type: str = "console") -> str:
        """Î¶¨Ìè¨Ìä∏ Ìè¨Îß∑ÌåÖ"""
        if format_type == "json": import json; return json.dumps(self.formatter.format_json_report(report), ensure_ascii=False, indent=2)
        return self.formatter.format_console_report(report)

def create_report_generation_layer() -> ReportGenerationLayer: return ReportGenerationLayer()

def process_report_generation_layer(context: PipelineContext) -> PipelineContext:
    """Report Generation Layer Ï≤òÎ¶¨ Ìï®Ïàò"""
    report_layer = create_report_generation_layer()
    investment_report = report_layer.generate_report(context)
    context.final_report = investment_report
    context.processing_steps.append(
        f"REPORT_GENERATION_LAYER: Ìà¨Ïûê ÌèâÍ∞Ä Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± ÏôÑÎ£å (Ï∂îÏ≤ú: {investment_report.recommendation.value})"
    )
    return context
